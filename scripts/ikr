#!/usr/bin/env python
from traitlets.config.loader import Config
try:
    get_ipython
except NameError:
    nested = 0
    cfg = Config()
else:
    cfg = Config()
    nested = 1


from IPython.terminal.embed import InteractiveShellEmbed
shell = InteractiveShellEmbed(config=cfg,
                              banner1="knowledge_representation Interactive Shell 0.1.0",
                              exit_msg="Leaving knowledge_representation Interactive Shell")

LOGO = r"""
           __             ___  __   __   ___      __   ___  __     
|__/ |\ | /  \ |  | |    |__  |  \ / _` |__      |__) |__  |__)    
|  \ | \| \__/ |/\| |___ |___ |__/ \__> |___ ___ |  \ |___ |                                                       
"""

import knowledge_representation
from knowledge_representation import Entity, EntityAttribute, Concept, Instance, Map, Point, Pose, Region

# Register __str__ as pretty printer for built in types
formatter = shell.display_formatter.formatters['text/plain']
formatter.for_type(Entity, lambda obj, p, cycle: p.text(str(obj) if not cycle else '...'))
formatter.for_type(EntityAttribute, lambda obj, p, cycle: p.text(str(obj) if not cycle else '...'))
formatter.for_type(Concept, lambda obj, p, cycle: p.text(str(obj) if not cycle else '...'))
formatter.for_type(Instance, lambda obj, p, cycle: p.text(str(obj) if not cycle else '...'))
formatter.for_type(Map, lambda obj, p, cycle: p.text(str(obj) if not cycle else '...'))
formatter.for_type(Point, lambda obj, p, cycle: p.text(str(obj) if not cycle else '...'))
formatter.for_type(Pose, lambda obj, p, cycle: p.text(str(obj) if not cycle else '...'))
formatter.for_type(Region, lambda obj, p, cycle: p.text(str(obj) if not cycle else '...'))


ltmc = knowledge_representation.get_default_ltmc()

shell(LOGO)