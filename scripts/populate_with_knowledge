#!/usr/bin/env python
import knowledge_representation
from knowledge_representation import LongTermMemoryConduit
import argparse
import sys
import os
import yaml

def get_instance(ltmc, names):
    instance_name, concept_name = names
    concept = ltmc.get_concept(concept_name)
    instance = ltmc.get_instance_named(concept, instance_name)
    if not instance:
        instance = concept.create_instance(instance_name)
    return instance

def add_attributes(ltmc, entity, attributes):
    for attribute in attributes:
        name = attribute["name"]
        if "instance" in attribute["value"].keys():
            instance = get_instance(ltmc, attribute["value"]["instance"])
            entity.add_attribute(name, instance)

def populate(ltmc, file_path):
    if not os.path.isfile(file_path):
        print(
            "File not found at " + file_path + ".")
        return False
    data = read_yaml_from_file(file_path)

    if data.get("entities"):
        for entry in data["entities"]:
            if "concept" in entry.keys():
                concept = ltmc.get_concept(entry["concept"])
                if "attributes" in entry.keys():
                    add_attributes(ltmc, concept, entry["attributes"])
            if "instance" in entry.keys():
                instance = get_instance(ltmc, entry["instance"])
                if "attributes" in entry.keys():
                    add_attributes(ltmc, concept, entry["attributes"])
                    
    return True


def read_yaml_from_file(file_path):
    with open(file_path, 'r') as stream:
        try:
            contents = yaml.load(stream)
            return contents
        except yaml.YAMLError:
            print("File found at " + file_path + ", but cannot be parsed by YAML parser.")
            exit(1)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("file_paths", type=str, nargs="+")
    args = parser.parse_args()
    ltmc = knowledge_representation.get_default_ltmc()
    success = False
    for path in args.file_paths:
        success = populate(ltmc, path)
    exit_code = 0 if success else 1
    exit(exit_code)


if __name__ == "__main__":
    main()
